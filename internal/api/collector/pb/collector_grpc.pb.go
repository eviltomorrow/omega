// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: collector.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectorClient is the client API for Collector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectorClient interface {
	Push(ctx context.Context, opts ...grpc.CallOption) (Collector_PushClient, error)
}

type collectorClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorClient(cc grpc.ClientConnInterface) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) Push(ctx context.Context, opts ...grpc.CallOption) (Collector_PushClient, error) {
	stream, err := c.cc.NewStream(ctx, &Collector_ServiceDesc.Streams[0], "/omega.Collector/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorPushClient{stream}
	return x, nil
}

type Collector_PushClient interface {
	Send(*MetricSet) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type collectorPushClient struct {
	grpc.ClientStream
}

func (x *collectorPushClient) Send(m *MetricSet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectorPushClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollectorServer is the server API for Collector service.
// All implementations must embed UnimplementedCollectorServer
// for forward compatibility
type CollectorServer interface {
	Push(Collector_PushServer) error
	mustEmbedUnimplementedCollectorServer()
}

// UnimplementedCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedCollectorServer struct {
}

func (UnimplementedCollectorServer) Push(Collector_PushServer) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedCollectorServer) mustEmbedUnimplementedCollectorServer() {}

// UnsafeCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorServer will
// result in compilation errors.
type UnsafeCollectorServer interface {
	mustEmbedUnimplementedCollectorServer()
}

func RegisterCollectorServer(s grpc.ServiceRegistrar, srv CollectorServer) {
	s.RegisterService(&Collector_ServiceDesc, srv)
}

func _Collector_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServer).Push(&collectorPushServer{stream})
}

type Collector_PushServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*MetricSet, error)
	grpc.ServerStream
}

type collectorPushServer struct {
	grpc.ServerStream
}

func (x *collectorPushServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectorPushServer) Recv() (*MetricSet, error) {
	m := new(MetricSet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Collector_ServiceDesc is the grpc.ServiceDesc for Collector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Collector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omega.Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Push",
			Handler:       _Collector_Push_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "collector.proto",
}
