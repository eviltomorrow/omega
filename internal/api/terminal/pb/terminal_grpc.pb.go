// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: terminal.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TerminalClient is the client API for Terminal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TerminalClient interface {
	Create(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	Exec(ctx context.Context, opts ...grpc.CallOption) (Terminal_ExecClient, error)
	ChangeWindow(ctx context.Context, in *WinSize, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type terminalClient struct {
	cc grpc.ClientConnInterface
}

func NewTerminalClient(cc grpc.ClientConnInterface) TerminalClient {
	return &terminalClient{cc}
}

func (c *terminalClient) Create(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/omega.Terminal/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalClient) Exec(ctx context.Context, opts ...grpc.CallOption) (Terminal_ExecClient, error) {
	stream, err := c.cc.NewStream(ctx, &Terminal_ServiceDesc.Streams[0], "/omega.Terminal/Exec", opts...)
	if err != nil {
		return nil, err
	}
	x := &terminalExecClient{stream}
	return x, nil
}

type Terminal_ExecClient interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ClientStream
}

type terminalExecClient struct {
	grpc.ClientStream
}

func (x *terminalExecClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *terminalExecClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *terminalClient) ChangeWindow(ctx context.Context, in *WinSize, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/omega.Terminal/ChangeWindow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerminalServer is the server API for Terminal service.
// All implementations must embed UnimplementedTerminalServer
// for forward compatibility
type TerminalServer interface {
	Create(context.Context, *Connection) (*wrapperspb.StringValue, error)
	Exec(Terminal_ExecServer) error
	ChangeWindow(context.Context, *WinSize) (*emptypb.Empty, error)
	mustEmbedUnimplementedTerminalServer()
}

// UnimplementedTerminalServer must be embedded to have forward compatible implementations.
type UnimplementedTerminalServer struct {
}

func (UnimplementedTerminalServer) Create(context.Context, *Connection) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTerminalServer) Exec(Terminal_ExecServer) error {
	return status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedTerminalServer) ChangeWindow(context.Context, *WinSize) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeWindow not implemented")
}
func (UnimplementedTerminalServer) mustEmbedUnimplementedTerminalServer() {}

// UnsafeTerminalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TerminalServer will
// result in compilation errors.
type UnsafeTerminalServer interface {
	mustEmbedUnimplementedTerminalServer()
}

func RegisterTerminalServer(s grpc.ServiceRegistrar, srv TerminalServer) {
	s.RegisterService(&Terminal_ServiceDesc, srv)
}

func _Terminal_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Connection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omega.Terminal/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServer).Create(ctx, req.(*Connection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Terminal_Exec_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TerminalServer).Exec(&terminalExecServer{stream})
}

type Terminal_ExecServer interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type terminalExecServer struct {
	grpc.ServerStream
}

func (x *terminalExecServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *terminalExecServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Terminal_ChangeWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WinSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServer).ChangeWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omega.Terminal/ChangeWindow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServer).ChangeWindow(ctx, req.(*WinSize))
	}
	return interceptor(ctx, in, info, handler)
}

// Terminal_ServiceDesc is the grpc.ServiceDesc for Terminal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Terminal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omega.Terminal",
	HandlerType: (*TerminalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Terminal_Create_Handler,
		},
		{
			MethodName: "ChangeWindow",
			Handler:    _Terminal_ChangeWindow_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exec",
			Handler:       _Terminal_Exec_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "terminal.proto",
}
